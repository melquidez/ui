#!/bin/bash

# Dependencies:
# - git
# - mercurial
# - vim
#
# The command to rollback a git submodule is NOT `git checkout` as it is for
# normal files, but rather you have to run `git reset --hard HEAD@{1}` from the
# directory of the submodule.
#
# TODO: Figure out the equivalent command for mercurial. (Think it might
# something like `hg update -r <rev-id>`.)
# TODO: Use lowercase variable names.

ROOT="${HOME}/ui"
THIRD_PARTY_PACKAGES=$ROOT/vendor
EMACS_PACKAGES_DIR=$THIRD_PARTY_PACKAGES/emacs

append-date-line-to-log () {
  echo "=== ${1^} === $(date)" >> $ROOT/update-log
}

update-git-packages () {
  cd "$1"
  append-date-line-to-log "$(basename ${1})"
  find . -maxdepth 1 -mindepth 1 -type d -exec bash -c \
       'cd "$0"; [[ -f ".git" ]] && git pull &' {} \; | tee -a $ROOT/update-log
  cd $ROOT
}

DL_HG_PACKAGES=$ROOT/misc/dl-hg-packages
cd $EMACS_PACKAGES_DIR/evil
append-date-line-to-log evil
hg pull -u | tee -a $ROOT/update-log
NEW_ID=$(hg --debug id -i)
ORIGIN='https://bitbucket.org/lyro/evil'
echo '#!/bin/bash' > $DL_HG_PACKAGES
printf "cd ${EMACS_PACKAGES_DIR/$HOME/\~}\nhg clone -r ${NEW_ID} ${ORIGIN}\n" \
       >> $DL_HG_PACKAGES
cd $ROOT

for dir in $THIRD_PARTY_PACKAGES/*/; do
  update-git-packages "${dir}"
done

vim -S ./misc/update-vim-plugins.vim
