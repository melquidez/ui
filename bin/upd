#!/usr/bin/env bash

# Dependencies:
# - git
# - mercurial
#
# NOTE: If it is the first time updating after a new clone, one should run the
# following instead of running this script:
#
#     git submodule foreach -q 'git checkout $(git config -f \
#     $toplevel/.gitmodules submodule.$name.branch || echo master)'
#
# This is because all the submodules will be in a 'detached HEAD' state, so the
# "git pull"'s in this script will not work.
#
# The command to rollback a git submodule is NOT `git checkout` as it is for
# normal files, but rather you have to run `git reset --hard HEAD@{1}` from the
# directory of the submodule.
#
# TODO: Detect if there's any changes to the recipes used in the emacs init file
# and the ones used by melpa, and figure out a way to guarantee that the
# existence of any such differences is made aware of to the user.

#     - This will obviously need to be done in elisp, most likely.
#
# TODO: Only update emacs packages if there's changes to the files under :files.
#
# TODO: Figure out the equivalent command for mercurial. (Think it might be
# something like `hg update -r <rev-id>`.)

root="${HOME}/ui"
update_log="${root}/update-log"
third_party_packages="${root}/vendor"
emacs_packages_dir="${third_party_packages}/emacs"

dl_hg_el_pkgs="${root}/misc/download-mercurial-elisp-packages"
cd "${emacs_packages_dir}/evil"

if hg incoming -q; then
  hg pull -u
  new_id="$(hg --debug id -i)"
  origin='https://bitbucket.org/lyro/evil'
  echo '#!/usr/bin/env bash' > "$dl_hg_el_pkgs"
  printf \
    "cd ${emacs_packages_dir/$HOME/\~}\nhg clone -r $new_id ${origin}\n" >> \
    "$dl_hg_el_pkgs"
fi

cd "$root"
git submodule --quiet foreach "${root}/misc/update-git-repo $update_log &" | tee

# Sometimes the above command for whatever reason seems to update a submodule's
# submodule even if the (top-level) submodule does not have an up-to-date
# reference to its submodule (and --recursive is not passed, as seen). "(new
# commits, modified content)" or something like that, as opposed to just "(new
# commits)", is usually the indicator of this happening.
#
# This needs to not happen because otherwise it will not be reproducible, the
# submodule's state/reference will be 'dirty', and git will not checkout the
# appropriate revision. To fix it:
#
# 1. First cd to the submodule which needs to fix its dirty submodule reference.
#
# 2. `git diff` to see the sub-submodule's old commit reference, which is the
#    one you wish to change it to so that the dirty reference is fixed.
#
# 3. cd to the sub-submodule and git checkout to that old revision.
#
# 4. Running `git status` from the top-level submodule should now show a clean
#    working directory. But running `git status` from the sub-submodule should
#    show it's in a 'detached HEAD' state, which may mean a subsequent `upd` may
#    not work properly.
#
#    To 'reconcile' this detached HEAD as the default branch (assuming it is
#    'master', otherwise change as appropriate), do the following from the
#    sub-submodule's directory:
#
#        $ git branch temp # Assuming branch 'temp' does not exist!
#        $ git checkout temp
#        $ git branch -f master temp
#        $ git checkout master
#        $ git branch -d temp
#
#    Above take from the excellent SO answer:
#    <http://stackoverflow.com/a/5772882>, consult it for detailed explanation.
#
# TODO: Detect and fix the above potential situation automatically.
