#!/usr/bin/guile \
-e main -s
!#

;; $PATH dependencies:
;;
;; - youtube-dl
;; - ffmpeg
;; - fold (coreutils)
;; - sed
;;
;; NOTE: Also uses mpv and $EDITOR environment variable.
;; NOTE: Runs `mpc update' if applicable after adding music to library.
;;
;; TODO: Remove `sed' dependency.
;; TODO: Remove `fold' dependency.

(use-modules (ice-9 ftw))
(use-modules (ice-9 match))
(use-modules (ice-9 popen))
(use-modules (ice-9 rdelim))
(use-modules (ice-9 readline))
(use-modules (rnrs sorting))
(use-modules (srfi srfi-1))

(define home (getenv "HOME"))
(define editor (getenv "EDITOR"))

(define (home-path path)
  (string-append home "/" path))

(define (substring-end str n)
  (substring str 0 (- (string-length str) n)))

(define (substring-length str start end)
  (substring str start (- (string-length str) end)))

(define (bell)
  (system* "echo" "-e" "\a"))

(define (play file)
  (system* "mpv" "--no-video" "--loop=inf" file))

(define (append-to-file text path)
  (let ((file (open-file path "a")))
    (display text file)
    (close-output-port file)))

(define (read-lines file)
  (let ((lst '()))
    (with-input-from-file file
      (lambda ()
        (do ((line (read-line) (read-line)))
            ((eof-object? line))
          (set! lst (cons line lst)))
        (reverse lst)))))

(define (edit . files)
  (system (string-append editor " " (string-join files))))

(define (get-file ext)
  (let ((results
         (scandir "." (lambda (name)
                        (string-suffix? (string-append "." ext) name)))))
    (if (null? results)
        ""
        (car results))))

(define (mkdir-p dir)
  (unless (file-exists? dir)
    (mkdir dir)))

(define (enter-dir dir)
  (mkdir-p dir)
  (chdir dir))

(define remove-stat-from-file-system-tree
  (match-lambda
    ((name stat)
     name)
    ((name stat children ...)
     (list name (map remove-stat-from-file-system-tree children)))))

(define (fs-tree path)
  (remove-stat-from-file-system-tree (file-system-tree path)))

(define (system-with-output-to-string command)
  (let* ((port (open-input-pipe command))
         (output (read-delimited "" port)))
    (close-pipe port)
    (if (eof-object? output)
        ""
        output)))

(define (stage-path root pid)
  (string-append root "/stage" (number->string pid)))

(define (find-new-stage root)
  (mkdir-p root)
  (let ((pid 1))
    (while (file-exists? (stage-path root pid))
      (set! pid (1+ pid)))
    (stage-path root pid)))

(define (create-playlists-file playlists)
  (call-with-output-file "playlists-unwrapped"
    (lambda (out)
      (when (not (null? playlists))
        (display (string-join playlists) out))
      (newline out)
      (display
       (string-join
        (list-sort string<?
                   (filter
                    (lambda (playlist) (not (or (string=? playlist "all")
                                                (string->number playlist))))
                    (map (lambda (playlist) (basename playlist ".m3u"))
                         (cadr (fs-tree (home-path
                                         ".config/mpd/playlists"))))))) out)
      (newline out)))
  (system "fold -s playlists-unwrapped | sed 's/ *$//' > playlists")
  (delete-file "playlists-unwrapped"))

(define (find-pending todo done)
  (unless (file-exists? done)
    (call-with-output-file done
      (lambda (out)
        (display "" out))))
  (lset-difference
   (lambda (s1 s2) (string-prefix? s2 s1))
   (read-lines todo)
   (read-lines done)))

(define (download-pending store todo done)
  (let ((pending (find-pending todo done)))
    (when (not (null? pending))
      (let* ((track (string-split (car pending) #\space))
             (url (car track))
             (playlists (cdr track))
             (name (system-with-output-to-string
                    (string-append "youtube-dl --get-title '" url "'"))))
        (enter-dir (find-new-stage store))
        (call-with-output-file "name"
          (lambda (out)
            (display name out)))
        (call-with-output-file "url"
          (lambda (out)
            (display url out)
            (newline out)))
        (create-playlists-file playlists)
        (system* "youtube-dl" "-f" "43" "--no-part"
                 "-o" (string-append (substring-end name 1) ".webm")
                 url)
        (append-to-file (string-append url "\n") done)
        (download-pending store todo done)))))

(define (begin-downloading edit? store todo done)
  (when edit?
    (edit todo))
  (download-pending store todo done)
  (bell))

(define (prune-todo todo done)
  ;; TODO: Remember to first check if any other `mdl' process is running, and
  ;; fail if there is, to avoid data races.
  (display "del"))

(define (skip stage)
  (chdir "..")
  (rename-file stage (string-append "." stage)))

(define (cleanup store)
  (chdir store)
  (let ((skipped
         (scandir store (lambda (name) (string-prefix? ".stage" name)))))
    (when (not (null? skipped))
      (rename-file (car skipped) (find-new-stage store))
      (cleanup store))))

(define (prepend-hours time)
  (string-append "00:" time))

(define (convert track . trims)
  ;; TODO: Refactor into one call to `system*' instead?
  (let ((webm (get-file "webm")))
    (case (length trims)
      ((0) => (begin
                (system* "ffmpeg" "-y" "-i" webm
                         "-vn" "-acodec" "copy" track)))
      ((1) => (begin
                (system* "ffmpeg" "-y" "-i" webm
                         "-ss" (prepend-hours (car trims))
                         "-vn" "-acodec" "copy" track)))
      ((2) => (begin
                (if (string-null? (car trims))
                    (system* "ffmpeg" "-y" "-i" webm
                             "-to" (prepend-hours (cadr trims))
                             "-vn" "-acodec" "copy" track)
                    (system* "ffmpeg" "-y" "-i" webm
                             "-ss" (prepend-hours (car trims))
                             "-to" (prepend-hours (cadr trims))
                             "-vn" "-acodec" "copy" track)))))))

(define (process track)
  (let ((lib (home-path "music")))
    )
  )

(define (add store)
  (let ((stages
         (scandir store (lambda (name) (string-prefix? "stage" name)))))
    (if (null? stages)
        (cleanup store)
        (let ((stage (car stages)))
          (chdir (string-append store "/" stage))
          (match (readline
                  (string-append
                   "Next is '" (car (read-lines "name")) "', continue? "))
            ((or "y" "")
             (let ((good? #f))
               (while (not good?)
                 (play (get-file "webm"))
                 (edit "name" "playlists")
                 (let* ((track-info (read-lines "name"))
                        (trim (cdr track-info))
                        (ogg (string-append (car track-info) ".ogg")))
                   (match trim
                     (()
                      (begin
                        (convert ogg)
                        (set! good? #t)))
                     (("-")
                      (begin
                        (skip stage)
                        (add store)))
                     (_
                      (begin
                        (convert ogg (string-split trim #\-))
                        (play ogg)
                        (if (equal? (readline "Is it good? (y/N) ") "y")
                            (set! good? #t)
                            (delete-file ogg)))))))
               (process (get-file "ogg"))
               (add store)))
            ("s"
             (begin
               (skip stage)
               (add store)))
            ("q"
             (cleanup store)))))))

(define (main args)
  (let* ((store (home-path "dl/music"))
         (todo (string-append store "/todo"))
         (done (string-append store "/done")))
    (if (> (length args) 1)
        (match (cadr args)
          ("s" (add store))
          ("d" (prune-todo todo done))
          (string
           (begin
             (append-to-file
              (string-append (string-join (cdr args)) "\n") todo)
             (begin-downloading #f store todo done))))
        (begin-downloading #t store todo done))))
