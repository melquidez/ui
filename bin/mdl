#!/usr/bin/guile \
-e main -s
!#

;; $PATH dependencies:
;;
;; - youtube-dl
;; - ffmpeg
;; - fold (coreutils)
;; - sed
;;
;; NOTE: Also uses mpv and $EDITOR environment variable.
;; NOTE: Runs `mpc update' if applicable after adding music to library.
;;
;; TODO: Remove `sed' dependency.
;; TODO: Remove `fold' dependency.

(use-modules (ice-9 ftw))
(use-modules (ice-9 match))
(use-modules (ice-9 rdelim))
(use-modules (rnrs sorting))
(use-modules (srfi srfi-1))

(define home (getenv "HOME"))
(define editor (getenv "EDITOR"))

(define (home-path path)
  (string-append home "/" path))

(define (bell)
  (system* "echo" "-e" "\a"))

(define (append-to-file text path)
  (let ((file (open-file path "a")))
    (display text file)
    (close-output-port file)))

(define (read-lines file)
  (let ((lst '()))
    (with-input-from-file file
      (lambda ()
        (do ((line (read-line) (read-line)))
            ((eof-object? line))
          (set! lst (cons line lst)))
        (reverse lst)))))

(define (edit . files)
  (system (string-append editor " " (string-join files))))

(define (mkdir-p dir)
  (unless (file-exists? dir)
    (mkdir dir)))

(define (enter-dir dir)
  (mkdir-p dir)
  (chdir dir))

(define remove-stat
  ;; Remove the `stat' object the `file-system-tree' provides for each file in
  ;; the tree.
  (match-lambda
    ;; Flat file.
    ((name stat) name)
    ;; Directory.
    ((name stat children ...)
     (list name (map remove-stat children)))))

(define (stage-path root pid)
  (string-append root "/stage" (number->string pid)))

(define (find-new-stage root)
  (mkdir-p root)
  (let ((pid 1))
    (while (file-exists? (stage-path root pid))
      (set! pid (1+ pid)))
    (stage-path root pid)))

(define (begin-adding-to-library)
  (display "add"))

(define (prune-todo)
  ;; TODO: Remember to first check if any other `mdl' process is running, and
  ;; fail if there is, to avoid data races.
  (display "del"))

(define (create-playlists-file playlists)
  (call-with-output-file "playlists-unwrapped"
    (lambda (out)
      (when (not (null? playlists))
        (display (string-join playlists) out))
      (newline out)
      (display
       (string-join
        (list-sort string<?
                   (filter
                    (lambda (playlist) (not (or (string=? playlist "all")
                                                (string->number playlist))))
                    (map (lambda (playlist) (basename playlist ".m3u"))
                         (cadr (remove-stat
                                (file-system-tree
                                 (home-path
                                  ".config/mpd/playlists")))))))) out)
      (newline out)))
  (system "fold -s playlists-unwrapped | sed 's/ *$//' > playlists")
  (delete-file "playlists-unwrapped"))

(define (find-pending todo done)
  (unless (file-exists? done)
    (call-with-output-file done
      (lambda (out)
        (display "" out))))
  (lset-difference
   (lambda (s1 s2) (string-prefix? s2 s1))
   (read-lines todo)
   (read-lines done)))

(define (download-pending store todo done)
  (let ((pending (find-pending todo done)))
    (when (not (null? pending))
      (let* ((track (string-split (car pending) #\space))
             (url (car track))
             (playlists (cdr track)))
        (enter-dir (find-new-stage store))
        (create-playlists-file playlists)
        (system* "youtube-dl" "-f" "43" "--no-part" url)
        ;; TODO: Get title of url and put that in `name' file.
        (append-to-file (string-append url "\n") done)
        (download-pending store todo done)))))

(define (begin-downloading edit? store todo done)
  (when edit?
    (edit todo))
  (download-pending store todo done)
  (bell))

(define (main args)
  (let* ((store (home-path "dl/music"))
         (todo (string-append store "/todo"))
         (done (string-append store "/done"))
         (lib (home-path "music")))
    (if (> (length args) 1)
        (match (cadr args)
          ("s" (begin-adding-to-library))
          ("d" (prune-todo))
          (string
           (begin
             (append-to-file
              (string-append (string-join (cdr args)) "\n") todo)
             (begin-downloading #f store todo done))))
        (begin-downloading #t store todo done))))
