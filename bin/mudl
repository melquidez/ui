#!/bin/bash

# Dependencies:
# - youtube-dl.
# - ffmpeg.
# - lltag.
# - mpd and mpc (optional, probably).
# - mpv (or some other media player to test trims).
# - Some $EDITOR defined.

set -u
set -e

dl_dir="${HOME}/dl/music"
tmp_dir_name='tmp'
tmp_n=1

namef='name'
playlistf='playlists'
trimf='trim'
# Poor man's boolean.
trimp='true'
urlf='url'

bell () {
  echo -e "\a"
}

cleanup () {
  remove-file-if-exists "$namef" "$playlistf" "$trimf" "$urlf"
  local current_dir="$(pwd)"
  cd ..
  rmdir -v "$current_dir"
}

get-title () {
  echo "$(youtube-dl --get-title ${1})"
}

remove-file-if-exists () {
  for file in "$@"; do
    [[ -f "$file" ]] && rm -v "$file"
  done
}

if [[ ! -d $dl_dir ]]; then
  read -p "Download directory '$dl_dir' does not exist, create it? (y/N)" \
       createp

  if [[ "$createp" == "y" ]]; then
    mkdir -pv $dl_dir
  else
    echo 'Aborting download.'
    exit 1
  fi
fi

while [[ -d "${dl_dir}/${tmp_dir_name}$tmp_n" ]]; do
  tmp_n=$(($tmp_n + 1))
done

mkdir -pv "${dl_dir}/${tmp_dir_name}$tmp_n"
cd "${dl_dir}/${tmp_dir_name}$tmp_n"

if [[ $# -eq 0 ]]; then
  $EDITOR $urlf
  get-title "$(< $urlf)" > $namef
  bell
  $EDITOR $namef $playlistf $trimf
else
  echo "$1" > $urlf
  get-title "$1" > $namef
  bell
  $EDITOR $namef $playlistf $trimf
fi

name="$(< $namef)"
# TODO: Download the generally less in size .ogg files instead?
youtube-dl -f 43 --no-part -o "${name}.webm" "$(< $urlf)"
bell

while [[ $trimp == 'true' ]]; do
  if [[ -s $trimf ]]; then
    trim_times="$(< $trimf)"

    if [[ "$trim_times" == *"-"* ]]; then
      trim_start="$(awk -F '-' '{print $1}' <<< $trim_times)"
      trim_end="$(awk -F '-' '{print $2}' <<< $trim_times)"

      if [[ -z "$trim_start" ]]; then
        # Only trim end.
        ffmpeg -y -i "${name}.webm" -to "00:$trim_end" -vn -acodec copy \
               "${name}.ogg"
      else
        # Trim both sides.
        ffmpeg -y -i "${name}.webm" -ss "00:$trim_start" -to "00:$trim_end" \
               -vn -acodec copy "${name}.ogg"
      fi
    else
      # Only trim beginning.
      ffmpeg -y -i "${name}.webm" -ss "00:$trim_times" -vn -acodec copy \
             "${name}.ogg"
    fi

    mpv --no-video --loop=inf "${name}.ogg"
    read -p "Is it good? (y/N)" trim_status

    if [[ "$trim_status" == "y" ]]; then
      trimp='false'
    else
      $EDITOR $trimf
    fi
  else
    # No trimming -> Can automatically convert and proceed without any need for
    # checking.
    ffmpeg -y -i "${name}.webm" -vn -acodec copy "${name}.ogg"
    trimp='false'
  fi
done

cleanup
